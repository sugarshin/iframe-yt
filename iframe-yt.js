// Generated by CoffeeScript 1.9.0

/*!
 * @license iframe-yt
 * (c) sugarshin
 * License: MIT
 */

(function() {
  "use strict";
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function(root, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
      module.exports = factory(require('eventemitter2').EventEmitter2, require('bluebird'), require('object-assign'));
    } else {
      root.IframeYT || (root.IframeYT = factory(root.EventEmitter2, root.Promise));
    }
  })(this, function(EventEmitter2, Promise, objectAssign) {
    var IframeYT;
    if (objectAssign === void 0) {
      objectAssign = function(out) {
        var i, key, val, _i, _ref, _ref1;
        out || (out = {});
        for (i = _i = 1, _ref = arguments.length; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
          if (!arguments[i]) {
            continue;
          }
          _ref1 = arguments[i];
          for (key in _ref1) {
            if (!__hasProp.call(_ref1, key)) continue;
            val = _ref1[key];
            out[key] = val;
          }
        }
        return out;
      };
    }
    return IframeYT = (function(_super) {
      var _apiLoaded;

      __extends(IframeYT, _super);

      _apiLoaded = false;

      (function() {
        var firstScriptTag, script;
        window.onYouTubeIframeAPIReady = function() {
          return _apiLoaded = true;
        };
        script = document.createElement('script');
        script.src = 'https://www.youtube.com/iframe_api';
        firstScriptTag = document.getElementsByTagName('script')[0];
        return firstScriptTag.parentNode.insertBefore(script, firstScriptTag);
      })();

      IframeYT.isAPILoaded = function() {
        return _apiLoaded;
      };

      IframeYT.apiLoad = function() {
        return new Promise(function(resolve, reject) {
          var _apiLoad, _timerID;
          _timerID = null;
          (_apiLoad = function() {
            return _timerID = setTimeout(function() {
              if (_apiLoaded) {
                resolve();
                clearTimeout(_timerID);
              }
              return _apiLoad();
            }, 100);
          })();
          return setTimeout(function() {
            clearTimeout(_timerID);
            return reject(new Error('Load error from YouTube iframe API'));
          }, 10000);
        });
      };

      IframeYT.prototype._defaults = {
        width: '640',
        height: '390',
        videoId: '',
        playerVars: null,
        onReady: function() {},
        onStateChange: function() {}
      };

      IframeYT.prototype._configure = function(el, opts) {
        this.el = el;
        this.opts = objectAssign({}, this._defaults, opts);
        return this.id = this.el.id;
      };

      function IframeYT(el, opts) {
        EventEmitter2.call(this);
        this._configure(el, opts);
      }

      IframeYT.prototype.create = function() {
        this.player = new window.YT.Player(this.id, {
          width: this.opts.width,
          height: this.opts.height,
          videoId: this.opts.videoId,
          playerVars: this.opts.playerVars,
          events: {
            onReady: this.opts.onReady,
            onStateChange: this.opts.onStateChange
          }
        });
        return this;
      };

      IframeYT.prototype.play = function() {
        this.player.playVideo();
        this.emit('playvideo');
        return this;
      };

      IframeYT.prototype.pause = function() {
        this.player.pauseVideo();
        this.emit('pausevideo');
        return this;
      };

      IframeYT.prototype.stop = function() {
        this.player.stopVideo();
        this.emit('stopvideo');
        return this;
      };

      return IframeYT;

    })(EventEmitter2);
  });

}).call(this);
